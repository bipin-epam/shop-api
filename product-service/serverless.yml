service: api

app: shop-api
frameworkVersion: "3"

custom:
  autoswagger:
    title: Shop API
    apiType: httpApi
    generateSwaggerOnDeploy: true
    swaggerPath: "swagger"
    useStage: true
  webpack:
    excludeFiles: ["**/*.test.js", "**/*d.ts", "**/*.py"]
    webpackConfig: "webpack.config.js"
    includeModules: false
    packager: "npm"

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ap-south-1
  profile: epam_bipin
  httpApi:
    cors: true

  environment:
    PRODUCTS_TABLE: "products"
    STOCKS_TABLE: "stocks"

package:
  individually: true
  excludeDevDependencies: false

functions:
  createProduct:
    handler: src/handlers/create/index.handler
    events:
      - httpApi:
          path: /products
          method: post
          bodyType: "CreateProductBody"
          responseData:
            201:
              description: "Product saved successfully!"
              bodyType: "ProductSaved"
            400:
              description: "Create product request failed with error"
              bodyType: "Error"
            500:
              description: "There was some error, retry later!"
              bodyType: "Error"
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
        Resource: "*"

  productList:
    handler: src/handlers/productList/index.handler
    events:
      - httpApi:
          path: /products
          method: get
          responseData:
            200:
              description: "Products fetched successfully!"
              bodyType: "ProductWithStock"
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Scan"
        Resource: "*"

  productById:
    handler: src/handlers/productById/index.handler
    events:
      - httpApi:
          path: /products/{id}
          method: get
          responseData:
            200:
              description: "Product found!"
              bodyType: "ProductById"
            404:
              description: "No such product found!"
              bodyType: "NotFound"
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Query"
        Resource: "*"

  catalogBatchProcess:
    handler: src/handlers/catalogBatchProcess/index.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - catalogItemsQueue
              - Arn
plugins:
  - serverless-auto-swagger
  - serverless-offline
  - serverless-webpack
  - serverless-iam-roles-per-function

resources:
  Resources:
    catalogItemsQueue:
      Type: AWS::SQS::Queue

  Outputs:
    catalogItemsQueue:
      Value: !Ref catalogItemsQueue
    catalogItemsQueueArn:
      Value: !GetAtt catalogItemsQueue.Arn
